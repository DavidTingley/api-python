This directory contains scripts that are used to test the NWB write API
installation.

The scripts run other scripts which create and validate NWB files, both
using the matlab and Python API.  The output files generated (both NWB
files and text output files) are compared to the output files created
from an installation that is presumed to be correct.

Setting up the tests.

1. Install example source data.  This can be done by running the
   "install_source_data.py" script in the examples/utility_scripts
   directory.  Or, if not installed, a prompt will be made when running
   the tests ("./test_all.sh" below) to install it.
   

2. To include tests for Matlab (optional):

   a) Setup the matlab_bridge API. Instructions for this are in the
      "matlab_bridge" directory.

   b) Edit file "test_all.cfg" (in this directory) to specify the location of
      the matlab executable.

3. To include tests of nwb_test_files (optional):
   
   To test the nwb.validate utility on existing NWB files, put the files
   (or a link to them), in directory named "nwb_test_files" within this
   directory.  The nwb.h5diffsig utility will be used to generate a
   'signature' of the file contents and the nwb.validate utility will be
   run to generate validation output.  This is useful for ensuring that
   the validation and h5diffsig outputs are consistent if there
   are changes made to the API software or to the environment (such as
   different versions of Python).

To run the tests, type "./test_all.sh".

It can take take half-hour or more to run all the scripts before the final
report is displayed.

How the tests work:

Script "make_curr.sh" is used to run all the scripts and generate a
directory name "curr" that has the text output of running all scripts
and utilities.  ("curr" stands for "current" as in the current setup.
A signature file is also made for every NWB file that is
created.  The signature files are made using utility nwb.h5diffsig.

Once directory "curr" is created, script "make_dirsig.py" is run which
generates a single file, named "dirsig.txt" inside curr.  The "dirsig.txt"
file has a list of all the files in curr along with a six character
hash code.  The hash codes are similar to a MD5 hash, in that two codes
made for the same file are unlikely to match unless the file contents
are the same.

Once the "dirsig.txt" file in generated inside "curr", script "show_diffs.py"
is run to show any differences between the dirsig.txt file inside directory
"curr" and file with the same name inside directory "orig".  "orig" stands for
"original".  It contains hashes for the "original setup", which is
presumed to be correct.  The "show_diffs.py" compares the hashes and also
checks for internal consistency within directories "curr" and "orig", to
to make sure that the NWB files generated by Matlab scripts, match exactly those
generated by the corresponding Python versions.  If everything matches, the
test passes.  If there are any differences, these are displayed and
something might not be working.

Script "set_orig.py" is used to rename the current "curr" director to
"orig" while saving any previously existing "orig" directory with
another name, e.g. orig_bk01, orig_bk02, etc.  This script can be used
to nake a "snapshot" (orig) of the curret setup, which can be used
for future comparisions.

Note: this  testing procedure is very sensitive in that it will detect
ANY difference, even if they are immaterial.  For example, if one version
of python displayed a number as "1.0" and another version displayed the
number as "1." (no "0" after the period) and this made it into the output
of one of the scripts, the change would be detected by the test procedure,
while, in practice, it may not matter.

The goal of developing this test procedure was to provide a way to test if
the output of the API software was identical between Python 2 and Python 3,
and to make sure that the output is the same when running on different
systems and environments.
